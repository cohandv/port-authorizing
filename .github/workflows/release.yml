name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Automatic Release
    runs-on: ubuntu-latest

    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release@^22.0.0 \
            @semantic-release/git@^10.0.0 \
            @semantic-release/github@^9.0.0 \
            @semantic-release/changelog@^6.0.0 \
            @semantic-release/exec@^6.0.0 \
            conventional-changelog-conventionalcommits@^7.0.0

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "revert", "release": "patch"},
                    {"type": "docs", "release": "patch"},
                    {"type": "style", "release": "patch"},
                    {"type": "refactor", "release": "patch"},
                    {"type": "test", "release": "patch"},
                    {"type": "build", "release": "patch"},
                    {"type": "ci", "release": "patch"},
                    {"type": "chore", "release": false},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      {"type": "feat", "section": "Features"},
                      {"type": "fix", "section": "Bug Fixes"},
                      {"type": "perf", "section": "Performance"},
                      {"type": "revert", "section": "Reverts"},
                      {"type": "docs", "section": "Documentation"},
                      {"type": "style", "section": "Styles"},
                      {"type": "refactor", "section": "Refactoring"},
                      {"type": "test", "section": "Tests"},
                      {"type": "build", "section": "Build System"},
                      {"type": "ci", "section": "CI/CD"}
                    ]
                  }
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "echo ${nextRelease.version} > VERSION"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": []
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "VERSION"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          npx semantic-release > /tmp/semantic-release.log 2>&1 || true
          cat /tmp/semantic-release.log

          # Extract version from semantic-release output
          if grep -q "Published release" /tmp/semantic-release.log; then
            VERSION=$(grep "Published release" /tmp/semantic-release.log | sed -E 's/.*Published release ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
            echo "✅ Release published: v$VERSION"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No release published"
          fi

      - name: Output release info
        run: |
          echo "New release published: ${{ steps.semantic.outputs.new_release_published }}"
          echo "New release version: ${{ steps.semantic.outputs.new_release_version }}"

  build-binaries:
    name: Build Release Binaries
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Get version
        id: get_version
        run: |
          VERSION="v${{ needs.release.outputs.new_release_version }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=$(git rev-parse --short HEAD)

          mkdir -p dist
          BINARY_NAME="port-authorizing-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"

          go build -ldflags "\
            -X main.Version=${VERSION} \
            -X main.BuildTime=${BUILD_TIME} \
            -X main.GitCommit=${GIT_COMMIT} \
            -s -w" \
            -o "dist/${BINARY_NAME}" \
            ./cmd/port-authorizing

          # Create checksum
          cd dist
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          cd ..

          echo "Built: dist/${BINARY_NAME}"
          ls -lh dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/port-authorizing-*
          retention-days: 5

  upload-release-assets:
    name: Upload Release Assets
    needs: [release, build-binaries]
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: binary-*
          merge-multiple: true

      - name: Display structure
        run: ls -R dist

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.release.outputs.new_release_version }}
          files: |
            dist/port-authorizing-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release notes with install instructions
        uses: actions/github-script@v7
        with:
          script: |
            const version = 'v${{ needs.release.outputs.new_release_version }}';

            // Get the existing release
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: version
            });

            // Append installation instructions
            const additionalNotes = `

            ## 📦 Installation

            ### Quick Install (Linux/macOS)
            \`\`\`bash
            # Detect your platform and install
            curl -fsSL https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/main/scripts/install.sh | bash
            \`\`\`

            ### Manual Download

            **Linux (amd64):**
            \`\`\`bash
            wget https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${version}/port-authorizing-linux-amd64
            chmod +x port-authorizing-linux-amd64
            sudo mv port-authorizing-linux-amd64 /usr/local/bin/port-authorizing
            \`\`\`

            **macOS (Apple Silicon):**
            \`\`\`bash
            wget https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${version}/port-authorizing-darwin-arm64
            chmod +x port-authorizing-darwin-arm64
            sudo mv port-authorizing-darwin-arm64 /usr/local/bin/port-authorizing
            \`\`\`

            **macOS (Intel):**
            \`\`\`bash
            wget https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${version}/port-authorizing-darwin-amd64
            chmod +x port-authorizing-darwin-amd64
            sudo mv port-authorizing-darwin-amd64 /usr/local/bin/port-authorizing
            \`\`\`

            ### Docker
            \`\`\`bash
            docker pull cohandv/port-authorizing:${version}
            docker pull cohandv/port-authorizing:latest
            \`\`\`

            ### Verify Installation
            \`\`\`bash
            port-authorizing --version
            \`\`\`

            ## 📊 Protocol Maturity

            | Protocol | Status | Features |
            |----------|--------|----------|
            | **PostgreSQL** | ✅ Mature | Authentication, query whitelisting, username validation, audit logging |
            | **HTTP/HTTPS** | ✅ Mature | Transparent proxying, authentication, full request/response handling |
            | **TCP** | 🚧 Beta | Basic proxying with authentication, limited protocol awareness |

            ### Checksums
            SHA256 checksums are provided for all binaries. Verify with:
            \`\`\`bash
            sha256sum -c port-authorizing-linux-amd64.sha256
            \`\`\`
            `;

            // Update the release
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: release.body + additionalNotes
            });

  build-and-push-docker:
    name: Build and Push Docker Images
    needs: [release]
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.release.outputs.new_release_version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: cohandv
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cohandv/port-authorizing
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.new_release_version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.new_release_version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=v${{ needs.release.outputs.new_release_version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: cohandv
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: cohandv/port-authorizing
          short-description: "Secure proxy for any service with authentication, authorization, and audit logging"
          readme-filepath: ./DOCKER_HUB_README.md
