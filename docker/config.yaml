server:
  port: 8080
  max_connection_duration: 2h
  base_url: "http://api:8080"  # Use docker service name

auth:
  jwt_secret: "your-secret-key-change-this-in-production"
  token_expiry: 30m

  # Authentication providers
  providers:
    # Keycloak OIDC (using docker service name)
    - name: keycloak
      type: oidc
      enabled: true
      config:
        issuer: "http://keycloak:8180/realms/portauth"
        client_id: "port-authorizing"
        client_secret: "your-client-secret-change-in-production"
        redirect_url: "http://localhost:8080/api/auth/oidc/callback"
        roles_claim: "roles"
        username_claim: "preferred_username"

  # Local users (for testing)
  users:
    - username: admin
      password: admin123
      roles:
        - admin
    - username: developer
      password: dev123
      roles:
        - developer

connections:
  # PostgreSQL test database (Docker service name)
  - name: postgres-test
    type: postgres
    host: postgres  # Docker service name
    port: 5432
    duration: 3m
    tags:
      - env:test
      - type:database
    backend_username: "testuser"
    backend_password: "testpass"
    backend_database: "testdb"
    metadata:
      description: "Test PostgreSQL database (Docker)"
      database: "testdb"

  # Nginx web server (Docker service name)
  - name: nginx-server
    type: http
    host: nginx  # Docker service name
    port: 80
    scheme: http
    duration: 1h
    tags:
      - env:test
      - type:web
    metadata:
      description: "Test Nginx web server (Docker)"

  # Production examples (external hosts)
  - name: postgres-prod
    type: postgres
    host: prod-db.example.com
    port: 5432
    duration: 15m
    tags:
      - env:production
      - type:database
    metadata:
      description: "Production PostgreSQL database"

  - name: internal-api
    type: http
    host: api.internal.example.com
    port: 443
    scheme: https
    duration: 2h
    tags:
      - env:production
      - type:api
    metadata:
      description: "Internal REST API"

  - name: redis-cache
    type: tcp
    host: redis.example.com
    port: 6379
    duration: 5m
    tags:
      - env:production
      - type:cache
    metadata:
      description: "Redis cache server"

# Role-based access policies
policies:
  # Admin has full access to everything
  - name: admin-all
    roles:
      - admin
    tags:
      - env:test
      - env:production
    tag_match: any
    whitelist:
      - ".*"

  # Developer has full access to test
  - name: dev-test
    roles:
      - developer
    tags:
      - env:test
    tag_match: any
    whitelist:
      # PostgreSQL query patterns
      - "^SELECT.*"        # Read data
      - "^EXPLAIN.*"       # Query planning (read-only)
      # PostgreSQL connection patterns (required by most clients)
      - "^SET.*"           # Session configuration (e.g., SET extra_float_digits, SET DateStyle)
      - "^SHOW.*"          # Show settings (read-only)
      - "^BEGIN.*"         # Transaction control
      - "^COMMIT.*"
      - "^ROLLBACK.*"
      # Note: Different PostgreSQL clients send different SET commands during connection.
      # If connection fails with "Query blocked", check audit.log for the blocked command.

      # HTTP patterns (for HTTP/HTTPS connections)
      - "^GET /.*"
      - "^POST /api/.*"
      - "^PUT /api/.*"
      - "^PATCH /api/.*"

  # Developer has read-only access to production
  - name: dev-prod-readonly
    roles:
      - developer
    tags:
      - env:production
    tag_match: any
    whitelist:
      # PostgreSQL read-only queries
      - "^SELECT.*"
      - "^EXPLAIN.*"
      # PostgreSQL connection patterns (required)
      - "^SET.*"
      - "^SHOW.*"
      - "^BEGIN.*"
      - "^COMMIT.*"
      - "^ROLLBACK.*"
      # HTTP read-only
      - "^GET .*"

security:
  enable_llm_analysis: false
  llm_provider: "openai"
  llm_api_key: ""

logging:
  audit_log_path: "stdout"  # Output audit logs to stdout for Docker logging
  log_level: "info"

# Approval workflow configuration
approval:
  enabled: true
  patterns:
     # HTTP DELETE requests
     - pattern: "^DELETE /.*"
       tags: ["env:test"]
       tag_match: all
       timeout_seconds: 10

     # PostgreSQL dangerous queries
     - pattern: "^DELETE FROM.*"
       tags: ["env:test"]
       tag_match: all
       timeout_seconds: 10
     - pattern: "^DROP TABLE.*"
       tags: ["env:test"]
       tag_match: all
       timeout_seconds: 10
     - pattern: "^DROP DATABASE.*"
       tags: ["env:test"]
       tag_match: all
       timeout_seconds: 10
     - pattern: "^TRUNCATE.*"
       tags: ["env:test"]
       tag_match: all
       timeout_seconds: 10
     - pattern: "^UPDATE.*"
       tags: ["env:test"]
       tag_match: all
       timeout_seconds: 10
  webhook:
    url: "http://mock-approval:9000/webhook"  # Docker service name
  slack:  # Not needed for mock server
    webhook_url: "https://hooks.slack.com/services/"

